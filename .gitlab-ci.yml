image: 172.16.11.112:5100/library/adoptopenjdk/maven-openjdk8-openj9:latest

variables:

  # images:[registry_hostname:port/][namespace/]repository[:tag]
before_script:
  - export VERSION=$(date '+%Y%m%d_%H%M%S')
  - export PROJECT_NAME="clientifproxy"
  - export IMAGE_NAME_PREFIX="172.16.11.112:5100/library/xsn/$PROJECT_NAME"
  - export IMAGE_NAME=$IMAGE_NAME_PREFIX:$VERSION
  - echo "Login $CI_REGISTRY"
  - echo "Login $CI_BUILD_TOKEN"
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  - echo "Build the image $IMAGE_NAME"

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - package
  - deploy


build-job:       # This job runs in the build stage, which runs first.
  before_script: []  # 清空 before_script#stage: build
  stage: build
  script:
    - echo "Compiling the code...1"
    - echo "todo mvn clean install"
    - mvn -v
    - mvn  package
    - echo "Compile package."
  artifacts:
    paths:
     - client-if-proxy-admin/target/client-if-proxy-admin.jar
  tags:
     - did_centerServer


unit-test-job:   # This job runs in the test stage .
  before_script: []  # 清空 before_script
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 10
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  before_script: []  # 清空 before_script
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."



deploy-job:      # This job runs in the deploy stage.
  before_script: []  # 清空 before_script
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploying application...11"
    - echo "Application successfully deployed."


build_deploy_docker_job:
  stage: deploy
  only:
    - master
  script:
    - echo "Login $CI_COMMIT_TIMESTAMP"
    - echo "IMAGE_NAME $IMAGE_NAME"
    - echo "Build the image $IMAGE_NAME"
    - docker build -t $IMAGE_NAME .
    - echo "Push the $IMAGE_NAME"
    - docker push $IMAGE_NAME
    - docker stop $PROJECT_NAME 2>/dev/null; docker rm $PROJECT_NAME 2>/dev/null #无论容器是否存在，都不会显示错误信息
    - docker run --name $PROJECT_NAME -d -p 8080:8080 $IMAGE_NAME
  tags:
    - did_centerServer
